1. Line 2 depends on the value in %r9,
   which is computed in line 1, so it is
   data-dependent on line 1.

2. The register values of line 3 are not directly
   affected by the execution of line 1, and line 1
   does not cause a non-sequential transfer of
   control, so there is no dependency from line
   3 to 1.

3. Line 7 can either cause a non-sequential control
   transfer to line 1, or continue sequential control
   to line 8, so line 8 is control-dependent on line 7.

4-5. A value is loaded from memory in line 1 and then
   used in line 2, so this is a load-use hazard. The
   pipeline must stall for one cycle so line 1 can make
   it to the memory stage to forward its value to
   line 2 in decode.

6-7. Since line 7 is a conditional jump, the pipeline
   must use branch prediction to predict the next PC.
   If it predicts incorrectly (we do not take the
   branch), then we have a mispredicted branch hazard.
   We won't find this out until line 7 reaches execute,
   so the instructions in fetch and decode need to be
   bubbled out.

8-9. Line 8 is a return instruction, and because it's
   not possible to predict the return address, we have
   to stall until it reaches memory and can read the
   return address, which is forwarded to fetch. This
   costs 3 cycles.

10-11. Line 5 moves a value already in a register to
   another register, which is used by line 6, so this
   is a def-use hazard (which is not present on the
   typical PIPE implementaiton as it is solved by
   forwarding). To account for this, the PIPE- 
   implementaiton must insert 3 nop instructions between
   lines 5 and 6, so that line 5 finishes the writeback
   stage as line 6 reaches decode and retrieves its
   values.